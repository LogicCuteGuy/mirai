use std::{net::SocketAddr, sync::{Arc, atomic::{AtomicBool, AtomicU16, AtomicU32}}, time::Instant};

use parking_lot::{Mutex, RwLock};
use tokio::net::UdpSocket;

use crate::raknet::{CompoundCollector, OrderChannel, RecoveryQueue, SendQueues};

const ORDER_CHANNEL_COUNT: usize = 5;

/// Container for Raknet-related data.
///
/// This container exists to clean up the [`Session`](crate::network::Session) implementation.
#[derive(Debug)]
pub struct RaknetData {
    /// IPv4 socket of the server.
    pub udp_socket: Arc<UdpSocket>,
    /// IP address of this session.
    pub address: SocketAddr,
    /// Maximum packet size
    pub mtu: u16,
    /// Client-provided GUID.
    /// These IDs are randomly generated by Minecraft for each connection and are unreliable.
    /// They should not be used as unique identifiers, use the XUID instead.
    pub guid: u64,
    /// Timestamp of when the last packet was received from this client.
    pub last_update: RwLock<Instant>,
    /// Batch number last assigned by the server.
    pub batch_sequence_number: AtomicU32,
    /// Sequence index last assigned by the server.
    pub sequence_index: AtomicU32,
    /// Acknowledgment index last used by the server.
    pub ack_index: AtomicU32,
    /// Compound ID last used by the server.
    pub compound_id: AtomicU16,
    /// Latest sequence index that was received.
    /// Sequenced packets with sequence numbers less than this one will be discarded.
    pub client_batch_number: AtomicU32,
    /// Collects fragmented packets.
    pub compound_collector: CompoundCollector,
    /// Channels used to order packets.
    pub order_channels: [OrderChannel; ORDER_CHANNEL_COUNT],
    /// Keeps track of all packets that are waiting to be sent.
    pub send_queue: SendQueues,
    /// Packets that are ready to be acknowledged.
    pub confirmed_packets: Mutex<Vec<u32>>,
    /// Queue that stores packets in case they need to be recovered due to packet loss.
    pub recovery_queue: RecoveryQueue,
    /// Whether compression has been configured for this session.
    /// This is set to true after network settings have been sent to the client.
    pub compression_enabled: AtomicBool,
}