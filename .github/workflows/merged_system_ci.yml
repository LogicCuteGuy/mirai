name: Merged System CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly regression tests
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Basic validation and linting
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    
    - name: Check documentation
      run: cargo doc --no-deps --all-features

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config libssl-dev
    
    - name: Run unit tests
      run: cargo test --lib --all-features
    
    - name: Run integration tests
      run: cargo test --test '*' --all-features
    
    - name: Run doc tests
      run: cargo test --doc --all-features

  # Performance regression testing
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[benchmark]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-benchmark-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Install criterion
      run: cargo install cargo-criterion
    
    - name: Run performance benchmarks
      run: |
        cargo criterion --message-format=json > benchmark_results.json
        
    - name: Compare with baseline
      run: |
        # Compare current benchmarks with stored baseline
        python3 scripts/compare_benchmarks.py benchmark_results.json
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark_results.json

  # Compatibility testing with different Minecraft versions
  compatibility:
    name: Minecraft Client Compatibility
    runs-on: ubuntu-latest
    strategy:
      matrix:
        minecraft_version: ["1.20.1", "1.20.4", "1.21.0"]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-compat-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Build test server
      run: cargo build --release --bin mirai
    
    - name: Download Minecraft client ${{ matrix.minecraft_version }}
      run: |
        mkdir -p test_clients
        # Download appropriate client version for testing
        # This would be replaced with actual client download logic
        echo "Mock client ${{ matrix.minecraft_version }}" > test_clients/client_${{ matrix.minecraft_version }}.jar
    
    - name: Run compatibility tests
      run: |
        # Start server in background
        ./target/release/mirai --config test_configs/compatibility_${{ matrix.minecraft_version }}.toml &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Run client compatibility tests
        cargo test --test client_compatibility -- --minecraft-version ${{ matrix.minecraft_version }}
        
        # Cleanup
        kill $SERVER_PID

  # Migration and backward compatibility testing
  migration:
    name: Migration Testing
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache cargo
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-migration-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Setup legacy mirai environment
      run: |
        # Create legacy mirai configuration and data
        mkdir -p test_data/legacy
        cp test_fixtures/legacy_configs/* test_data/legacy/
        cp -r test_fixtures/legacy_worlds/* test_data/legacy/
    
    - name: Run migration tests
      run: |
        cargo test --test migration_tests --all-features
    
    - name: Validate migrated data
      run: |
        cargo test --test compatibility_validation --all-features

  # Security and vulnerability scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install cargo-audit
      run: cargo install cargo-audit
    
    - name: Run security audit
      run: cargo audit
    
    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
    
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
    
    - name: Generate coverage report
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  # Load testing
  load_test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[load-test]')
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release server
      run: cargo build --release --bin mirai
    
    - name: Install load testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install asyncio aiohttp
    
    - name: Run load tests
      run: |
        # Start server
        ./target/release/mirai --config test_configs/load_test.toml &
        SERVER_PID=$!
        
        # Wait for startup
        sleep 15
        
        # Run load tests
        python3 scripts/load_test.py --connections 1000 --duration 300
        
        # Cleanup
        kill $SERVER_PID
    
    - name: Upload load test results
      uses: actions/upload-artifact@v3
      with:
        name: load-test-results-${{ github.sha }}
        path: load_test_results.json

  # Memory leak detection
  memory_test:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install valgrind
      run: sudo apt-get update && sudo apt-get install -y valgrind
    
    - name: Build debug server
      run: cargo build --bin mirai
    
    - name: Run memory leak detection
      run: |
        valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all \
          --track-origins=yes --verbose --log-file=valgrind.log \
          ./target/debug/mirai --config test_configs/memory_test.toml &
        
        # Let it run for a while
        sleep 60
        
        # Send shutdown signal
        pkill mirai
        
        # Check for leaks
        if grep -q "definitely lost" valgrind.log; then
          echo "Memory leaks detected!"
          cat valgrind.log
          exit 1
        fi

  # Release preparation
  release:
    name: Release Preparation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [validate, test, performance, compatibility, migration, security, coverage]
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Build release artifacts
      run: |
        cargo build --release --all-targets
    
    - name: Run final integration tests
      run: |
        cargo test --release --all-features
    
    - name: Package release
      run: |
        mkdir -p release_artifacts
        cp target/release/mirai release_artifacts/
        cp -r docs release_artifacts/
        cp README.md LICENSE release_artifacts/
        tar -czf mirai-merged-system.tar.gz release_artifacts/
    
    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ github.sha }}
        path: mirai-merged-system.tar.gz

  # Deployment to staging
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [validate, test, compatibility, migration]
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Deployment logic would go here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # Smoke test logic would go here

# Workflow for nightly comprehensive testing
  nightly_comprehensive:
    name: Nightly Comprehensive Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Run comprehensive test suite
      run: |
        # Run all tests with extended timeouts and more iterations
        cargo test --all-features --release -- --test-threads=1 --nocapture
    
    - name: Generate comprehensive report
      run: |
        python3 scripts/generate_nightly_report.py
    
    - name: Upload comprehensive results
      uses: actions/upload-artifact@v3
      with:
        name: nightly-comprehensive-${{ github.run_number }}
        path: nightly_report.html