use std::io::Read;
use std::net::{IpAddr, SocketAddr};

use bytes::{Buf, BufMut, BytesMut};
use flate2::read::DeflateDecoder;

use crate::instance::{IPV4_LOCAL_ADDR, IPV6_LOCAL_ADDR};
use crate::network::CompressionAlgorithm::Deflate;
use crate::network::frame::{Frame, FrameBatch};
use crate::network::header::Header;
use crate::network::session::order_channel::OrderChannel;
use crate::network::traits::Decodable;
use crate::util::{ReadExtensions, WriteExtensions};

#[test]
fn read_write_var_u32() {
    let mut buffer = BytesMut::new();
    buffer.put_var_u32(45);
    buffer.put_var_u32(2769);
    buffer.put_var_u32(105356);
    buffer.put_var_u32(359745976);

    let mut buffer = buffer.freeze();
    assert_eq!(buffer.get_var_u32().unwrap(), 45);
    assert_eq!(buffer.get_var_u32().unwrap(), 2769);
    assert_eq!(buffer.get_var_u32().unwrap(), 105356);
    assert_eq!(buffer.get_var_u32().unwrap(), 359745976);

    let mut buffer = BytesMut::from([0xc1, 0xe9, 0x33].as_ref());
    let a = buffer.get_var_u32().unwrap();

    let mut buffer2 = BytesMut::new();
    buffer2.put_var_u32(a);

    assert_eq!(&[0xc1, 0xe9, 0x33], buffer2.as_ref());
}

#[test]
fn read_write_u24_le() {
    let mut buffer = BytesMut::new();
    buffer.put_u24_le(125); // Test first byte only
    buffer.put_u24_le(50250); // Test first two bytes
    buffer.put_u24_le(1097359); // Test all bytes

    let mut buffer = buffer.freeze();
    assert_eq!(buffer.get_u24_le(), 125);
    assert_eq!(buffer.get_u24_le(), 50250);
    assert_eq!(buffer.get_u24_le(), 1097359);
}

#[test]
fn read_write_addr() -> anyhow::Result<()> {
    let ipv4_test = SocketAddr::new(IpAddr::V4(IPV4_LOCAL_ADDR), 19132);
    let ipv6_test = SocketAddr::new(IpAddr::V6(IPV6_LOCAL_ADDR), 19133);

    let mut buffer = BytesMut::new();
    buffer.put_addr(ipv4_test); // Test IPv4
    buffer.put_addr(ipv6_test); // Test IPv6

    let mut buffer = buffer.freeze();
    assert_eq!(buffer.get_addr()?, ipv4_test);
    assert_eq!(buffer.get_addr()?, ipv6_test);
    Ok(())
}

#[test]
fn order_channel() {
    let mut test_frame = Frame::default();
    let mut channel = OrderChannel::new();

    test_frame.order_index = 0;
    assert!(channel.insert(test_frame.clone()).is_some());

    test_frame.order_index = 2;
    assert!(channel.insert(test_frame.clone()).is_none());

    test_frame.order_index = 1;
    let output = channel.insert(test_frame).unwrap();

    assert_eq!(output.len(), 2);
    assert_eq!(output[0].order_index, 1);
    assert_eq!(output[1].order_index, 2);
}

#[test]
fn test() {
    const DATA_DRAGONFLY: &[u8] = &[
        // Frame header
        /*0x80, 0x05, 0x00, 0x00, 0x60, 0x0d, 0x88, 0x05, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,*/
        0xfe, 0x00, 0xa9, 0x01, 0x56,
        // ServerToClientHandshake ------------------------------------------------------------
        0xfe, 0xa7, 0x03, 0x03, 0xa4, 0x03,
        // JWT --------------------------------------------------------------------------------
        0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x46, 0x55, 0x7a, 0x4d,
        0x34, 0x4e, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x67, 0x31, 0x64, 0x53, 0x49, 0x36, 0x49, 0x6b,
        0x31, 0x49, 0x57, 0x58, 0x64, 0x46, 0x51, 0x56, 0x6c, 0x49, 0x53, 0x32, 0x39, 0x61, 0x53,
        0x58, 0x70, 0x71, 0x4d, 0x45, 0x4e, 0x42, 0x55, 0x56, 0x6c, 0x47, 0x53, 0x7a, 0x52, 0x46,
        0x52, 0x55, 0x46, 0x44, 0x53, 0x55, 0x52, 0x5a, 0x5a, 0x30, 0x46, 0x46, 0x54, 0x55, 0x68,
        0x44, 0x4f, 0x47, 0x70, 0x75, 0x56, 0x57, 0x39, 0x32, 0x55, 0x57, 0x49, 0x31, 0x55, 0x45,
        0x4a, 0x7a, 0x63, 0x56, 0x52, 0x78, 0x4e, 0x43, 0x74, 0x54, 0x57, 0x46, 0x64, 0x47, 0x53,
        0x7a, 0x5a, 0x43, 0x64, 0x45, 0x70, 0x59, 0x54, 0x6c, 0x42, 0x46, 0x51, 0x57, 0x51, 0x7a,
        0x56, 0x47, 0x5a, 0x54, 0x5a, 0x44, 0x6b, 0x79, 0x52, 0x69, 0x74, 0x68, 0x62, 0x55, 0x34,
        0x30, 0x65, 0x6c, 0x64, 0x59, 0x52, 0x6a, 0x6c, 0x36, 0x4e, 0x6c, 0x4a, 0x58, 0x5a, 0x58,
        0x64, 0x4e, 0x54, 0x32, 0x74, 0x6d, 0x52, 0x55, 0x5a, 0x6d, 0x65, 0x46, 0x46, 0x35, 0x63,
        0x30, 0x64, 0x6c, 0x4d, 0x7a, 0x45, 0x79, 0x5a, 0x30, 0x4e, 0x6d, 0x65, 0x6b, 0x63, 0x35,
        0x59, 0x6c, 0x5a, 0x36, 0x56, 0x47, 0x35, 0x33, 0x61, 0x44, 0x42, 0x46, 0x59, 0x79, 0x39,
        0x6c, 0x53, 0x45, 0x6c, 0x74, 0x56, 0x54, 0x56, 0x45, 0x4d, 0x33, 0x70, 0x36, 0x53, 0x55,
        0x30, 0x79, 0x51, 0x6e, 0x59, 0x78, 0x4f, 0x54, 0x4e, 0x34, 0x52, 0x44, 0x5a, 0x4c, 0x52,
        0x46, 0x5a, 0x79, 0x4f, 0x58, 0x64, 0x49, 0x4e, 0x33, 0x52, 0x44, 0x64, 0x45, 0x52, 0x4b,
        0x63, 0x32, 0x6f, 0x69, 0x66, 0x51, 0x2e, 0x65, 0x79, 0x4a, 0x7a, 0x59, 0x57, 0x78, 0x30,
        0x49, 0x6a, 0x6f, 0x69, 0x54, 0x32, 0x56, 0x33, 0x57, 0x46, 0x5a, 0x68, 0x57, 0x54, 0x52,
        0x6b, 0x52, 0x31, 0x4e, 0x68, 0x54, 0x47, 0x39, 0x73, 0x59, 0x7a, 0x4e, 0x59, 0x54, 0x55,
        0x52, 0x4a, 0x55, 0x53, 0x4a, 0x39, 0x2e, 0x53, 0x63, 0x66, 0x70, 0x64, 0x31, 0x65, 0x79,
        0x69, 0x4e, 0x53, 0x56, 0x4c, 0x57, 0x4d, 0x73, 0x79, 0x77, 0x6f, 0x69, 0x41, 0x7a, 0x66,
        0x57, 0x47, 0x59, 0x58, 0x69, 0x30, 0x4e, 0x46, 0x33, 0x79, 0x6c, 0x48, 0x30, 0x7a, 0x49,
        0x49, 0x42, 0x38, 0x4a, 0x4a, 0x56, 0x34, 0x4a, 0x45, 0x4f, 0x66, 0x59, 0x49, 0x75, 0x6a,
        0x78, 0x36, 0x76, 0x54, 0x5f, 0x6c, 0x34, 0x62, 0x63, 0x78, 0x39, 0x65, 0x58, 0x50, 0x2d,
        0x49, 0x31, 0x79, 0x57, 0x59, 0x42, 0x4a, 0x58, 0x4d, 0x62, 0x56, 0x34, 0x33, 0x38, 0x65,
        0x61, 0x46, 0x7a, 0x42, 0x4c, 0x5f, 0x34, 0x5f, 0x56, 0x35, 0x63, 0x4e, 0x30, 0x5a, 0x33,
        0x31, 0x55, 0x36, 0x6b, 0x50, 0x66, 0x74, 0x57, 0x43, 0x4a, 0x4e, 0x69, 0x44, 0x31, 0x44,
        0x6e, 0x71, 0x56, 0x42, 0x51, 0x7a, 0x49, 0x78, 0x5a, 0x6d, 0x67, 0x71, 0x61, 0x59, 0x75,
        0x03, 0x00,
    ];

    const DATA_MOJANG: &[u8] = &[
        0xfe, 0x01, 0xae, 0x01, 0x51,
        // ServerToClientHandshake ------------------------------------------------------------
        0xfe, 0xac, 0x03, 0x03, 0xa9, 0x03,
        // JWT --------------------------------------------------------------------------------
        0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x46, 0x55, 0x7a, 0x4d,
        0x34, 0x4e, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x67, 0x31, 0x64, 0x53, 0x49, 0x36, 0x49, 0x6b,
        0x31, 0x49, 0x57, 0x58, 0x64, 0x46, 0x51, 0x56, 0x6c, 0x49, 0x53, 0x32, 0x39, 0x61, 0x53,
        0x58, 0x70, 0x71, 0x4d, 0x45, 0x4e, 0x42, 0x55, 0x56, 0x6c, 0x47, 0x53, 0x7a, 0x52, 0x46,
        0x52, 0x55, 0x46, 0x44, 0x53, 0x55, 0x52, 0x5a, 0x5a, 0x30, 0x46, 0x46, 0x54, 0x47, 0x68,
        0x33, 0x52, 0x7a, 0x4e, 0x51, 0x5a, 0x32, 0x68, 0x72, 0x55, 0x30, 0x64, 0x58, 0x4e, 0x57,
        0x31, 0x45, 0x4f, 0x53, 0x39, 0x57, 0x4e, 0x47, 0x49, 0x78, 0x4d, 0x6e, 0x6c, 0x50, 0x65,
        0x48, 0x52, 0x69, 0x63, 0x31, 0x6b, 0x35, 0x61, 0x6c, 0x41, 0x79, 0x52, 0x55, 0x68, 0x4a,
        0x5a, 0x6e, 0x4e, 0x4d, 0x63, 0x6c, 0x6c, 0x56, 0x63, 0x48, 0x68, 0x46, 0x54, 0x47, 0x67,
        0x76, 0x62, 0x44, 0x4e, 0x72, 0x61, 0x47, 0x56, 0x6a, 0x62, 0x45, 0x78, 0x55, 0x65, 0x6d,
        0x68, 0x34, 0x56, 0x6d, 0x52, 0x58, 0x4b, 0x32, 0x78, 0x69, 0x53, 0x57, 0x35, 0x61, 0x56,
        0x58, 0x6c, 0x77, 0x54, 0x57, 0x78, 0x53, 0x52, 0x46, 0x51, 0x34, 0x59, 0x32, 0x35, 0x45,
        0x54, 0x6c, 0x42, 0x70, 0x53, 0x6e, 0x56, 0x6c, 0x5a, 0x6b, 0x6c, 0x4f, 0x52, 0x47, 0x74,
        0x79, 0x4b, 0x30, 0x78, 0x4d, 0x64, 0x6b, 0x56, 0x4c, 0x4f, 0x55, 0x5a, 0x73, 0x57, 0x6a,
        0x63, 0x7a, 0x4c, 0x33, 0x52, 0x59, 0x53, 0x47, 0x70, 0x68, 0x59, 0x6c, 0x46, 0x4f, 0x61,
        0x6b, 0x6f, 0x34, 0x54, 0x30, 0x70, 0x36, 0x61, 0x6a, 0x52, 0x4b, 0x55, 0x6a, 0x45, 0x32,
        0x53, 0x58, 0x6f, 0x69, 0x66, 0x51, 0x6f, 0x2e, 0x65, 0x79, 0x4a, 0x7a, 0x59, 0x57, 0x78,
        0x30, 0x49, 0x6a, 0x6f, 0x69, 0x4c, 0x30, 0x52, 0x55, 0x63, 0x54, 0x4d, 0x76, 0x55, 0x6c,
        0x6b, 0x72, 0x4f, 0x56, 0x68, 0x48, 0x54, 0x6b, 0x5a, 0x54, 0x57, 0x58, 0x51, 0x72, 0x63,
        0x44, 0x59, 0x34, 0x64, 0x7a, 0x30, 0x39, 0x49, 0x6e, 0x30, 0x4b, 0x2e, 0x79, 0x49, 0x75,
        0x66, 0x6b, 0x45, 0x70, 0x42, 0x57, 0x57, 0x43, 0x6d, 0x50, 0x59, 0x73, 0x61, 0x68, 0x6a,
        0x5a, 0x36, 0x4b, 0x35, 0x6a, 0x43, 0x38, 0x4f, 0x6c, 0x4a, 0x2d, 0x65, 0x72, 0x65, 0x6f,
        0x4b, 0x45, 0x50, 0x36, 0x6e, 0x35, 0x59, 0x5a, 0x6a, 0x48, 0x61, 0x46, 0x5a, 0x39, 0x47,
        0x31, 0x78, 0x4a, 0x6a, 0x5f, 0x4e, 0x6c, 0x67, 0x77, 0x50, 0x48, 0x47, 0x78, 0x47, 0x33,
        0x51, 0x69, 0x34, 0x49, 0x54, 0x34, 0x4a, 0x77, 0x74, 0x39, 0x37, 0x6a, 0x77, 0x46, 0x44,
        0x47, 0x4e, 0x6b, 0x65, 0x64, 0x47, 0x71, 0x43, 0x4e, 0x37, 0x79, 0x35, 0x71, 0x54, 0x4a,
        0x79, 0x34, 0x4d, 0x67, 0x67, 0x35, 0x66, 0x44, 0x66, 0x5f, 0x36, 0x4f, 0x39, 0x70, 0x49,
        0x52, 0x35, 0x58, 0x47, 0x4e, 0x4d, 0x31, 0x4d, 0x52, 0x4e, 0x59, 0x4a, 0x45, 0x72, 0x6f,
        0x54, 0x30, 0x58, 0x5a, 0x63,
    ];

    const DATA_VEX: &[u8] = &[
        // Frame header
        /*0x80, 0x03, 0x00, 0x00, 0x60, 0x0d, 0x50, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,*/
        0xfe, 0xa7, 0x03, 0x03, 0xa4, 0x03,
        // JWT --------------------------------------------------------------------------------
        0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x46, 0x55, 0x7a, 0x4d,
        0x34, 0x4e, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x67, 0x31, 0x64, 0x53, 0x49, 0x36, 0x49, 0x6b,
        0x31, 0x49, 0x57, 0x58, 0x64, 0x46, 0x51, 0x56, 0x6c, 0x49, 0x53, 0x32, 0x39, 0x61, 0x53,
        0x58, 0x70, 0x71, 0x4d, 0x45, 0x4e, 0x42, 0x55, 0x56, 0x6c, 0x47, 0x53, 0x7a, 0x52, 0x46,
        0x52, 0x55, 0x46, 0x44, 0x53, 0x55, 0x52, 0x5a, 0x5a, 0x30, 0x46, 0x46, 0x65, 0x56, 0x52,
        0x35, 0x5a, 0x7a, 0x64, 0x72, 0x52, 0x32, 0x56, 0x76, 0x52, 0x33, 0x49, 0x77, 0x53, 0x54,
        0x46, 0x43, 0x56, 0x44, 0x6c, 0x42, 0x55, 0x6b, 0x74, 0x47, 0x5a, 0x47, 0x77, 0x77, 0x51,
        0x6c, 0x68, 0x70, 0x56, 0x33, 0x6b, 0x77, 0x64, 0x45, 0x52, 0x61, 0x65, 0x46, 0x6c, 0x52,
        0x4f, 0x46, 0x49, 0x32, 0x56, 0x30, 0x77, 0x76, 0x62, 0x32, 0x45, 0x34, 0x63, 0x6a, 0x6b,
        0x31, 0x52, 0x6a, 0x46, 0x31, 0x4f, 0x55, 0x31, 0x57, 0x4f, 0x57, 0x77, 0x77, 0x59, 0x6b,
        0x70, 0x4d, 0x53, 0x32, 0x46, 0x4e, 0x64, 0x44, 0x5a, 0x68, 0x63, 0x32, 0x4d, 0x76, 0x63,
        0x6b, 0x6b, 0x79, 0x63, 0x6b, 0x68, 0x72, 0x51, 0x6b, 0x46, 0x70, 0x55, 0x55, 0x46, 0x6e,
        0x62, 0x46, 0x4e, 0x43, 0x56, 0x6c, 0x52, 0x71, 0x59, 0x54, 0x46, 0x4f, 0x5a, 0x30, 0x35,
        0x4b, 0x56, 0x54, 0x68, 0x36, 0x63, 0x30, 0x74, 0x48, 0x64, 0x48, 0x42, 0x34, 0x65, 0x57,
        0x35, 0x75, 0x4e, 0x44, 0x41, 0x7a, 0x5a, 0x45, 0x67, 0x32, 0x59, 0x6c, 0x59, 0x30, 0x51,
        0x33, 0x4a, 0x79, 0x52, 0x55, 0x4d, 0x31, 0x52, 0x32, 0x68, 0x44, 0x55, 0x57, 0x6c, 0x35,
        0x63, 0x55, 0x45, 0x69, 0x66, 0x51, 0x2e, 0x65, 0x79, 0x4a, 0x7a, 0x59, 0x57, 0x78, 0x30,
        0x49, 0x6a, 0x6f, 0x69, 0x55, 0x6a, 0x4a, 0x61, 0x64, 0x32, 0x4e, 0x46, 0x4f, 0x56, 0x6c,
        0x4f, 0x61, 0x31, 0x5a, 0x32, 0x55, 0x33, 0x70, 0x4f, 0x62, 0x6d, 0x46, 0x48, 0x4d, 0x55,
        0x31, 0x61, 0x64, 0x79, 0x4a, 0x39, 0x2e, 0x57, 0x45, 0x6e, 0x54, 0x4d, 0x44, 0x37, 0x4e,
        0x70, 0x58, 0x4f, 0x44, 0x5f, 0x48, 0x79, 0x76, 0x67, 0x68, 0x49, 0x70, 0x75, 0x54, 0x49,
        0x61, 0x52, 0x38, 0x6e, 0x69, 0x63, 0x2d, 0x62, 0x69, 0x33, 0x6c, 0x64, 0x6d, 0x37, 0x77,
        0x35, 0x48, 0x52, 0x7a, 0x4c, 0x5a, 0x48, 0x4b, 0x65, 0x34, 0x44, 0x57, 0x76, 0x7a, 0x41,
        0x48, 0x59, 0x74, 0x77, 0x5f, 0x32, 0x64, 0x2d, 0x36, 0x5f, 0x67, 0x70, 0x78, 0x37, 0x4d,
        0x6d, 0x54, 0x77, 0x44, 0x35, 0x4b, 0x51, 0x33, 0x71, 0x47, 0x49, 0x72, 0x47, 0x50, 0x42,
        0x38, 0x75, 0x48, 0x75, 0x48, 0x70, 0x79, 0x5f, 0x38, 0x56, 0x75, 0x65, 0x68, 0x46, 0x55,
        0x41, 0x53, 0x4a, 0x48, 0x30, 0x58, 0x4d, 0x6e, 0x41, 0x64, 0x54, 0x2d, 0x6d, 0x52, 0x4e,
        0x70, 0x37, 0x4a, 0x79, 0x66, 0x4e, 0x49, 0x61, 0x76, 0x77, 0x76, 0x35, 0x76, 0x35, 0x66,
    ];

    {
        // Game packet ID (0xfe)
        // ? (u8)
        // Packet length (u16 LE)
        // ? (u8)

        // 430 for Mojang
        let mut buffer = BytesMut::from([0xfe, 0x01, 0xae, 0x01, 0x51].as_ref());
        buffer.get_u8();

        let short = buffer.get_u16_le();
        println!("short {short}");
    }

    {
        let mut buffer = BytesMut::from(DATA_DRAGONFLY);
        assert_eq!(buffer.get_u8(), 0xfe);

        buffer.advance(1);

        let length = buffer.get_var_u32().unwrap();
        println!("{length}");

        let header = Header::decode(&mut buffer).unwrap();
        println!("{header:?}");

        // let length = buffer.get_var_u32().unwrap();
        // println!("{length}");

        // let header = Header::decode(&mut buffer).unwrap();
        // println!("{header:?}");
    }
}

#[test]
fn test3() {
    const DATA: &[u8] = &[
        0, 169, 1, 86, 254, 167, 3, 3, 164, 3, 101, 121, 74, 104, 98, 71, 99, 105, 79, 105, 74, 70,
        85, 122, 77, 52, 78, 67, 73, 115, 73, 110, 103, 49, 100, 83, 73, 54, 73, 107, 49, 73, 87,
        88, 100, 70, 81, 86, 108, 73, 83, 50, 57, 97, 83, 88, 112, 113, 77, 69, 78, 66, 85, 86,
        108, 71, 83, 122, 82, 70, 82, 85, 70, 68, 83, 85, 82, 90, 90, 48, 70, 70, 76, 49, 78, 68,
        83, 68, 77, 48, 87, 87, 78, 83, 100, 110, 89, 48, 100, 106, 104, 66, 83, 69, 78, 109, 78,
        49, 74, 54, 83, 110, 99, 49, 87, 85, 112, 83, 87, 69, 86, 54, 100, 87, 73, 119, 101, 85,
        111, 118, 85, 87, 53, 78, 78, 51, 100, 109, 82, 68, 66, 88, 90, 50, 74, 51, 86, 110, 112,
        109, 98, 88, 66, 82, 97, 48, 108, 87, 83, 49, 100, 108, 89, 85, 86, 97, 97, 69, 104, 50,
        100, 69, 53, 108, 83, 50, 116, 78, 90, 107, 100, 75, 90, 50, 100, 86, 83, 88, 112, 53, 76,
        51, 81, 48, 100, 85, 49, 106, 97, 88, 108, 51, 101, 109, 49, 76, 77, 70, 90, 68, 85, 69,
        70, 112, 101, 88, 103, 50, 98, 48, 100, 72, 81, 106, 86, 52, 100, 122, 108, 97, 90, 85,
        120, 80, 77, 87, 57, 70, 81, 106, 90, 114, 90, 108, 103, 120, 76, 50, 49, 107, 90, 87, 48,
        105, 102, 81, 46, 101, 121, 74, 122, 89, 87, 120, 48, 73, 106, 111, 105, 75, 122, 100, 87,
        87, 106, 70, 112, 82, 87, 82, 81, 83, 110, 108, 104, 86, 108, 107, 48, 84, 71, 74, 69, 87,
        87, 57, 53, 90, 121, 74, 57, 46, 95, 106, 122, 76, 57, 56, 113, 81, 73, 83, 78, 101, 90,
        97, 72, 97, 72, 73, 78, 122, 99, 104, 80, 117, 51, 78, 56, 116, 90, 66, 72, 120, 97, 82,
        73, 111, 103, 56, 97, 101, 118, 103, 86, 52, 95, 117, 108, 87, 85, 53, 80, 99, 104, 66, 71,
        90, 99, 51, 70, 116, 115, 102, 52, 106, 103, 105, 110, 104, 110, 53, 100, 50, 88, 74, 48,
        111, 53, 114, 114, 81, 74, 109, 99, 81, 51, 71, 77, 105, 111, 67, 103, 66, 68, 50, 55, 78,
        65, 106, 72, 57, 83, 101, 45, 116, 84, 111, 86, 99, 106, 112, 102, 68, 110, 75, 119, 50,
        115, 117, 69, 118, 82, 107, 78, 122, 101, 81, 116, 116, 3, 0,
    ];

    const DECOMPRESSED: &[u8] = &[
        0xA7, 0x3, 0x3, 0xA4, 0x3, 0x65, 0x79, 0x4A, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4F, 0x69,
        0x4A, 0x46, 0x55, 0x7A, 0x4D, 0x34, 0x4E, 0x43, 0x49, 0x73, 0x49, 0x6E, 0x67, 0x31, 0x64,
        0x53, 0x49, 0x36, 0x49, 0x6B, 0x31, 0x49, 0x57, 0x58, 0x64, 0x46, 0x51, 0x56, 0x6C, 0x49,
        0x53, 0x32, 0x39, 0x61, 0x53, 0x58, 0x70, 0x71, 0x4D, 0x45, 0x4E, 0x42, 0x55, 0x56, 0x6C,
        0x47, 0x53, 0x7A, 0x52, 0x46, 0x52, 0x55, 0x46, 0x44, 0x53, 0x55, 0x52, 0x5A, 0x5A, 0x30,
        0x46, 0x46, 0x4C, 0x31, 0x4E, 0x44, 0x53, 0x44, 0x4D, 0x30, 0x57, 0x57, 0x4E, 0x53, 0x64,
        0x6E, 0x59, 0x30, 0x64, 0x6A, 0x68, 0x42, 0x53, 0x45, 0x4E, 0x6D, 0x4E, 0x31, 0x4A, 0x36,
        0x53, 0x6E, 0x63, 0x31, 0x57, 0x55, 0x70, 0x53, 0x57, 0x45, 0x56, 0x36, 0x64, 0x57, 0x49,
        0x77, 0x65, 0x55, 0x6F, 0x76, 0x55, 0x57, 0x35, 0x4E, 0x4E, 0x33, 0x64, 0x6D, 0x52, 0x44,
        0x42, 0x58, 0x5A, 0x32, 0x4A, 0x33, 0x56, 0x6E, 0x70, 0x6D, 0x62, 0x58, 0x42, 0x52, 0x61,
        0x30, 0x6C, 0x57, 0x53, 0x31, 0x64, 0x6C, 0x59, 0x55, 0x56, 0x61, 0x61, 0x45, 0x68, 0x32,
        0x64, 0x45, 0x35, 0x6C, 0x53, 0x32, 0x74, 0x4E, 0x5A, 0x6B, 0x64, 0x4B, 0x5A, 0x32, 0x64,
        0x56, 0x53, 0x58, 0x70, 0x35, 0x4C, 0x33, 0x51, 0x30, 0x64, 0x55, 0x31, 0x6A, 0x61, 0x58,
        0x6C, 0x33, 0x65, 0x6D, 0x31, 0x4C, 0x4D, 0x46, 0x5A, 0x44, 0x55, 0x45, 0x46, 0x70, 0x65,
        0x58, 0x67, 0x32, 0x62, 0x30, 0x64, 0x48, 0x51, 0x6A, 0x56, 0x34, 0x64, 0x7A, 0x6C, 0x61,
        0x5A, 0x55, 0x78, 0x50, 0x4D, 0x57, 0x39, 0x46, 0x51, 0x6A, 0x5A, 0x72, 0x5A, 0x6C, 0x67,
        0x78, 0x4C, 0x32, 0x31, 0x6B, 0x5A, 0x57, 0x30, 0x69, 0x66, 0x51, 0x2E, 0x65, 0x79, 0x4A,
        0x7A, 0x59, 0x57, 0x78, 0x30, 0x49, 0x6A, 0x6F, 0x69, 0x4B, 0x7A, 0x64, 0x57, 0x57, 0x6A,
        0x46, 0x70, 0x52, 0x57, 0x52, 0x51, 0x53, 0x6E, 0x6C, 0x68, 0x56, 0x6C, 0x6B, 0x30, 0x54,
        0x47, 0x4A, 0x45, 0x57, 0x57, 0x39, 0x35, 0x5A, 0x79, 0x4A, 0x39, 0x2E, 0x5F, 0x6A, 0x7A,
        0x4C, 0x39, 0x38, 0x71, 0x51, 0x49, 0x53, 0x4E, 0x65, 0x5A, 0x61, 0x48, 0x61, 0x48, 0x49,
        0x4E, 0x7A, 0x63, 0x68, 0x50, 0x75, 0x33, 0x4E, 0x38, 0x74, 0x5A, 0x42, 0x48, 0x78, 0x61,
        0x52, 0x49, 0x6F, 0x67, 0x38, 0x61, 0x65, 0x76, 0x67, 0x56, 0x34, 0x5F, 0x75, 0x6C, 0x57,
        0x55, 0x35, 0x50, 0x63, 0x68, 0x42, 0x47, 0x5A, 0x63, 0x33, 0x46, 0x74, 0x73, 0x66, 0x34,
        0x6A, 0x67, 0x69, 0x6E, 0x68, 0x6E, 0x35, 0x64, 0x32, 0x58, 0x4A, 0x30, 0x6F, 0x35, 0x72,
        0x72, 0x51, 0x4A, 0x6D, 0x63, 0x51, 0x33, 0x47, 0x4D, 0x69, 0x6F, 0x43, 0x67, 0x42, 0x44,
        0x32, 0x37, 0x4E, 0x41, 0x6A, 0x48, 0x39, 0x53, 0x65, 0x2D, 0x74, 0x54, 0x6F, 0x56, 0x63,
        0x6A, 0x70, 0x66, 0x44, 0x6E, 0x4B, 0x77, 0x32, 0x73, 0x75, 0x45, 0x76, 0x52, 0x6B, 0x4E,
        0x7A, 0x65, 0x51, 0x74, 0x74,
    ];

    let mut decompressor = DeflateDecoder::new(DATA);
    let mut decompressed = Vec::new();
    decompressor.read_to_end(&mut decompressed).unwrap();

    println!("{:X?}", decompressed);
}
