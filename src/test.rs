use std::io::Read;
use std::net::{IpAddr, SocketAddr};

use bytes::{Buf, BufMut, BytesMut};

use crate::error::VexResult;
use crate::instance::{IPV4_LOCAL_ADDR, IPV6_LOCAL_ADDR};
use crate::network::packets::CompressionAlgorithm::Deflate;
use crate::network::raknet::frame::{Frame, FrameBatch};
use crate::network::raknet::header::Header;
use crate::network::session::order_channel::OrderChannel;
use crate::network::traits::Decodable;
use crate::util::{ReadExtensions, WriteExtensions};

#[test]
fn read_write_var_u32() {
    let mut buffer = BytesMut::new();
    buffer.put_var_u32(45);
    buffer.put_var_u32(2769);
    buffer.put_var_u32(105356);
    buffer.put_var_u32(359745976);

    let mut buffer = buffer.freeze();
    assert_eq!(buffer.get_var_u32().unwrap(), 45);
    assert_eq!(buffer.get_var_u32().unwrap(), 2769);
    assert_eq!(buffer.get_var_u32().unwrap(), 105356);
    assert_eq!(buffer.get_var_u32().unwrap(), 359745976);

    let mut buffer = BytesMut::from([0xc1, 0xe9, 0x33].as_ref());
    let a = buffer.get_var_u32().unwrap();

    let mut buffer2 = BytesMut::new();
    buffer2.put_var_u32(a);

    assert_eq!(&[0xc1, 0xe9, 0x33], buffer2.as_ref());
}

#[test]
fn read_write_u24_le() {
    let mut buffer = BytesMut::new();
    buffer.put_u24_le(125); // Test first byte only
    buffer.put_u24_le(50250); // Test first two bytes
    buffer.put_u24_le(1097359); // Test all bytes

    let mut buffer = buffer.freeze();
    assert_eq!(buffer.get_u24_le(), 125);
    assert_eq!(buffer.get_u24_le(), 50250);
    assert_eq!(buffer.get_u24_le(), 1097359);
}

#[test]
fn read_write_addr() -> VexResult<()> {
    let ipv4_test = SocketAddr::new(IpAddr::V4(IPV4_LOCAL_ADDR), 19132);
    let ipv6_test = SocketAddr::new(IpAddr::V6(IPV6_LOCAL_ADDR), 19133);

    let mut buffer = BytesMut::new();
    buffer.put_addr(ipv4_test); // Test IPv4
    buffer.put_addr(ipv6_test); // Test IPv6

    let mut buffer = buffer.freeze();
    assert_eq!(buffer.get_addr()?, ipv4_test);
    assert_eq!(buffer.get_addr()?, ipv6_test);
    Ok(())
}

#[test]
fn order_channel() {
    let mut test_frame = Frame::default();
    let mut channel = OrderChannel::new();

    test_frame.order_index = 0;
    assert!(channel.insert(test_frame.clone()).is_some());

    test_frame.order_index = 2;
    assert!(channel.insert(test_frame.clone()).is_none());

    test_frame.order_index = 1;
    let output = channel.insert(test_frame).unwrap();

    assert_eq!(output.len(), 2);
    assert_eq!(output[0].order_index, 1);
    assert_eq!(output[1].order_index, 2);
}

#[test]
fn test() {
    const DATA: &[u8] = &[
        /*0xFE, 0xA7, 0x3,*/ 0x3, 0xA4, 0x3, 0x65, 0x79, 0x4A, 0x68, 0x62, 0x47, 0x63, 0x69,
        0x4F, 0x69, 0x4A, 0x46, 0x55, 0x7A, 0x4D, 0x34, 0x4E, 0x43, 0x49, 0x73, 0x49, 0x6E, 0x67,
        0x31, 0x64, 0x53, 0x49, 0x36, 0x49, 0x6B, 0x31, 0x49, 0x57, 0x58, 0x64, 0x46, 0x51, 0x56,
        0x6C, 0x49, 0x53, 0x32, 0x39, 0x61, 0x53, 0x58, 0x70, 0x71, 0x4D, 0x45, 0x4E, 0x42, 0x55,
        0x56, 0x6C, 0x47, 0x53, 0x7A, 0x52, 0x46, 0x52, 0x55, 0x46, 0x44, 0x53, 0x55, 0x52, 0x5A,
        0x5A, 0x30, 0x46, 0x46, 0x54, 0x55, 0x68, 0x44, 0x4F, 0x47, 0x70, 0x75, 0x56, 0x57, 0x39,
        0x32, 0x55, 0x57, 0x49, 0x31, 0x55, 0x45, 0x4A, 0x7A, 0x63, 0x56, 0x52, 0x78, 0x4E, 0x43,
        0x74, 0x54, 0x57, 0x46, 0x64, 0x47, 0x53, 0x7A, 0x5A, 0x43, 0x64, 0x45, 0x70, 0x59, 0x54,
        0x6C, 0x42, 0x46, 0x51, 0x57, 0x51, 0x7A, 0x56, 0x47, 0x5A, 0x54, 0x5A, 0x44, 0x6B, 0x79,
        0x52, 0x69, 0x74, 0x68, 0x62, 0x55, 0x34, 0x30, 0x65, 0x6C, 0x64, 0x59, 0x52, 0x6A, 0x6C,
        0x36, 0x4E, 0x6C, 0x4A, 0x58, 0x5A, 0x58, 0x64, 0x4E, 0x54, 0x32, 0x74, 0x6D, 0x52, 0x55,
        0x5A, 0x6D, 0x65, 0x46, 0x46, 0x35, 0x63, 0x30, 0x64, 0x6C, 0x4D, 0x7A, 0x45, 0x79, 0x5A,
        0x30, 0x4E, 0x6D, 0x65, 0x6B, 0x63, 0x35, 0x59, 0x6C, 0x5A, 0x36, 0x56, 0x47, 0x35, 0x33,
        0x61, 0x44, 0x42, 0x46, 0x59, 0x79, 0x39, 0x6C, 0x53, 0x45, 0x6C, 0x74, 0x56, 0x54, 0x56,
        0x45, 0x4D, 0x33, 0x70, 0x36, 0x53, 0x55, 0x30, 0x79, 0x51, 0x6E, 0x59, 0x78, 0x4F, 0x54,
        0x4E, 0x34, 0x52, 0x44, 0x5A, 0x4C, 0x52, 0x46, 0x5A, 0x79, 0x4F, 0x58, 0x64, 0x49, 0x4E,
        0x33, 0x52, 0x44, 0x64, 0x45, 0x52, 0x4B, 0x63, 0x32, 0x6F, 0x69, 0x66, 0x51, 0x2E, 0x65,
        0x79, 0x4A, 0x7A, 0x59, 0x57, 0x78, 0x30, 0x49, 0x6A, 0x6F, 0x69, 0x54, 0x32, 0x56, 0x33,
        0x57, 0x46, 0x5A, 0x68, 0x57, 0x54, 0x52, 0x6B, 0x52, 0x31, 0x4E, 0x68, 0x54, 0x47, 0x39,
        0x73, 0x59, 0x7A, 0x4E, 0x59, 0x54, 0x55, 0x52, 0x4A, 0x55, 0x53, 0x4A, 0x39, 0x2E, 0x53,
        0x63, 0x66, 0x70, 0x64, 0x31, 0x65, 0x79, 0x69, 0x4E, 0x53, 0x56, 0x4C, 0x57, 0x4D, 0x73,
        0x79, 0x77, 0x6F, 0x69, 0x41, 0x7A, 0x66, 0x57, 0x47, 0x59, 0x58, 0x69, 0x30, 0x4E, 0x46,
        0x33, 0x79, 0x6C, 0x48, 0x30, 0x7A, 0x49, 0x49, 0x42, 0x38, 0x4A, 0x4A, 0x56, 0x34, 0x4A,
        0x45, 0x4F, 0x66, 0x59, 0x49, 0x75, 0x6A, 0x78, 0x36, 0x76, 0x54, 0x5F, 0x6C, 0x34, 0x62,
        0x63, 0x78, 0x39, 0x65, 0x58, 0x50, 0x2D, 0x49, 0x31, 0x79, 0x57, 0x59, 0x42, 0x4A, 0x58,
        0x4D, 0x62, 0x56, 0x34, 0x33, 0x38, 0x65, 0x61, 0x46, 0x7A, 0x42, 0x4C, 0x5F, 0x34, 0x5F,
        0x56, 0x35, 0x63, 0x4E, 0x30, 0x5A, 0x33, 0x31, 0x55, 0x36, 0x6B, 0x50, 0x66, 0x74, 0x57,
        0x43, 0x4A, 0x4E, 0x69, 0x44, 0x31, 0x44, 0x6E, 0x71, 0x56, 0x42, 0x51, 0x7A, 0x49, 0x78,
        0x5A, 0x6D, 0x67, 0x71, 0x61, 0x59, 0x75,
    ];

    const DATA2: &[u8] = &[
        /*0xfe, 0xa7, 0x3,*/ 0x3, 0xa4, 0x03, 0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69,
        0x4f, 0x69, 0x4a, 0x46, 0x55, 0x7a, 0x4d, 0x34, 0x4e, 0x43, 0x49, 0x73, 0x49, 0x6e, 0x67,
        0x31, 0x64, 0x53, 0x49, 0x36, 0x49, 0x6b, 0x31, 0x49, 0x57, 0x58, 0x64, 0x46, 0x51, 0x56,
        0x6c, 0x49, 0x53, 0x32, 0x39, 0x61, 0x53, 0x58, 0x70, 0x71, 0x4d, 0x45, 0x4e, 0x42, 0x55,
        0x56, 0x6c, 0x47, 0x53, 0x7a, 0x52, 0x46, 0x52, 0x55, 0x46, 0x44, 0x53, 0x55, 0x52, 0x5a,
        0x5a, 0x30, 0x46, 0x46, 0x54, 0x6b, 0x74, 0x61, 0x61, 0x6b, 0x46, 0x45, 0x52, 0x6d, 0x35,
        0x33, 0x53, 0x58, 0x41, 0x76, 0x64, 0x6b, 0x4d, 0x34, 0x54, 0x47, 0x5a, 0x73, 0x63, 0x7a,
        0x52, 0x52, 0x64, 0x32, 0x64, 0x44, 0x65, 0x6b, 0x5a, 0x76, 0x64, 0x30, 0x5a, 0x53, 0x64,
        0x56, 0x70, 0x53, 0x62, 0x6a, 0x52, 0x68, 0x62, 0x30, 0x35, 0x4f, 0x4e, 0x6c, 0x52, 0x48,
        0x63, 0x6c, 0x4e, 0x47, 0x62, 0x47, 0x5a, 0x6f, 0x62, 0x47, 0x74, 0x48, 0x64, 0x30, 0x64,
        0x4c, 0x54, 0x47, 0x74, 0x6c, 0x55, 0x6a, 0x4d, 0x78, 0x4d, 0x45, 0x35, 0x61, 0x65, 0x6b,
        0x68, 0x33, 0x4f, 0x46, 0x68, 0x7a, 0x4e, 0x32, 0x39, 0x6b, 0x55, 0x48, 0x64, 0x70, 0x62,
        0x32, 0x45, 0x79, 0x55, 0x45, 0x64, 0x34, 0x65, 0x45, 0x56, 0x51, 0x5a, 0x46, 0x6c, 0x6a,
        0x64, 0x54, 0x42, 0x6d, 0x5a, 0x6a, 0x46, 0x4f, 0x61, 0x79, 0x39, 0x69, 0x61, 0x56, 0x4a,
        0x55, 0x55, 0x6e, 0x52, 0x61, 0x56, 0x54, 0x41, 0x30, 0x61, 0x46, 0x4d, 0x30, 0x64, 0x6c,
        0x4a, 0x74, 0x5a, 0x6e, 0x6f, 0x31, 0x5a, 0x47, 0x78, 0x70, 0x4e, 0x57, 0x4a, 0x6f, 0x61,
        0x54, 0x6c, 0x47, 0x64, 0x7a, 0x49, 0x76, 0x65, 0x6e, 0x6f, 0x69, 0x66, 0x51, 0x2e, 0x65,
        0x79, 0x4a, 0x7a, 0x59, 0x57, 0x78, 0x30, 0x49, 0x6a, 0x6f, 0x69, 0x56, 0x58, 0x70, 0x73,
        0x51, 0x32, 0x52, 0x49, 0x61, 0x47, 0x46, 0x4e, 0x56, 0x47, 0x52, 0x4f, 0x56, 0x44, 0x46,
        0x76, 0x64, 0x31, 0x59, 0x77, 0x53, 0x6d, 0x68, 0x61, 0x64, 0x79, 0x4a, 0x39, 0x2e, 0x73,
        0x43, 0x78, 0x49, 0x39, 0x32, 0x7a, 0x7a, 0x4a, 0x4d, 0x45, 0x4d, 0x34, 0x53, 0x51, 0x4c,
        0x78, 0x5a, 0x50, 0x58, 0x4a, 0x55, 0x71, 0x36, 0x70, 0x47, 0x66, 0x75, 0x49, 0x4a, 0x76,
        0x59, 0x4c, 0x66, 0x42, 0x4a, 0x78, 0x66, 0x50, 0x7a, 0x2d, 0x36, 0x5a, 0x76, 0x50, 0x61,
        0x43, 0x51, 0x56, 0x31, 0x42, 0x64, 0x38, 0x44, 0x70, 0x38, 0x51, 0x59, 0x56, 0x7a, 0x79,
        0x41, 0x34, 0x75, 0x78, 0x48, 0x52, 0x71, 0x31, 0x39, 0x42, 0x58, 0x7a, 0x4a, 0x38, 0x31,
        0x63, 0x2d, 0x54, 0x37, 0x45, 0x54, 0x5f, 0x72, 0x48, 0x56, 0x73, 0x6a, 0x7a, 0x59, 0x43,
        0x4f, 0x39, 0x6e, 0x58, 0x6c, 0x79, 0x41, 0x48, 0x39, 0x68, 0x5a, 0x4d, 0x4e, 0x31, 0x56,
        0x41, 0x59, 0x71, 0x6c, 0x43, 0x41, 0x55, 0x71, 0x71, 0x42, 0x41, 0x71, 0x51, 0x6f, 0x51,
        0x36, 0x49, 0x62, 0x75, 0x37, 0x5f, 0x69,
    ];

    {
        let mut buffer = BytesMut::from(DATA);
        // assert_eq!(buffer.get_u8(), 0xfe);

        // let length = buffer.get_var_u32().unwrap();
        // println!("{length}");

        let header = Header::decode(&mut buffer).unwrap();
        println!("{header:?}");

        let string = buffer.get_string().unwrap();
        println!("{string:?}");
    }

    println!("2\n\n\n\n");
    {
        let mut buffer = BytesMut::from(DATA2);
        // assert_eq!(buffer.get_u8(), 0xfe);

        // let length = buffer.get_var_u32().unwrap();
        // println!("{length}");

        let header = Header::decode(&mut buffer).unwrap();
        println!("{header:?}");

        let string = buffer.get_string().unwrap();
        println!("{string:?}");
    }
}
